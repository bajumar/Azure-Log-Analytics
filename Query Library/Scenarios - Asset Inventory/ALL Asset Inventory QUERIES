// Heartbeat-Table: Computer Geo-Locations
Heartbeat
| distinct Computer, ComputerEnvironment, RemoteIPCountry, RemoteIPLatitude, RemoteIPLongitude
| sort by Computer asc

// Heartbeat-Table: Inventory of Linux Versions
Heartbeat
| where OSType == "Linux"
| summarize hint.strategy=partitioned arg_max(TimeGenerated, *) by Computer
| extend Version = strcat(OSMajorVersion, ".", OSMinorVersion)
| project Computer, OSType, OSName, Version, ComputerIP, ComputerEnvironment
| sort by Computer asc

// Heartbeat-Table: Inventory of Windows Versions
// Reference: https://docs.microsoft.com/en-us/windows/desktop/SysInfo/operating-system-version
let VersionMap = datatable (Version: string, ReleaseName:string)
[
    "10.0", "Server 2016/2019",
     "6.3", "Server 2012 R2",
     "6.2", "Server 2012",
     "6.1", "Server 2008 R2",
     "6.0", "Server 2008",
     "5.2", "Server 2003/R2",
     "5.0", "Server 2000"
];
Heartbeat
| where OSType == "Windows"
| summarize hint.strategy=partitioned arg_max(TimeGenerated, *) by Computer
| extend Version = strcat (OSMajorVersion, ".", OSMinorVersion)
| join kind = leftouter(VersionMap) on Version
| extend OSName = strcat(OSType, " ", ReleaseName)
| project Computer, OSType, OSName, Version, ComputerIP, ComputerEnvironment
| sort by Computer asc

// Heartbeat-Table: Inventory of All OS Versions (Cross-Platform)
// Reference: https://docs.microsoft.com/en-us/windows/desktop/SysInfo/operating-system-version
let VersionMap = datatable (Version: string, ReleaseName:string)
[
    "10.0", "Server 2016/2019",
     "6.3", "Server 2012 R2",
     "6.2", "Server 2012",
     "6.1", "Server 2008 R2",
     "6.0", "Server 2008",
     "5.2", "Server 2003/R2",
     "5.0", "Server 2000"
];
Heartbeat
| summarize hint.strategy=partitioned arg_max(TimeGenerated, *) by Computer
| extend Version = strcat(OSMajorVersion, ".", OSMinorVersion)
| join kind = leftouter(VersionMap) on Version
| extend OSName = iif(isempty(OSName), strcat(OSType, " ", ReleaseName), OSName)
| project Computer, OSType, OSName, Version, ComputerIP, ComputerEnvironment
| sort by Computer asc

// Heartbeat-PieChart: Inventory of All Operating System Versions (Cross-Platform)
// Reference: https://docs.microsoft.com/en-us/windows/desktop/SysInfo/operating-system-version
let VersionMap = datatable (Version: string, ReleaseName:string)
[
    "10.0", "Server 2016/2019",
     "6.3", "Server 2012 R2",
     "6.2", "Server 2012",
     "6.1", "Server 2008 R2",
     "6.0", "Server 2008",
     "5.2", "Server 2003/2003 R2",
     "5.0", "Server 2000"
];
Heartbeat
| summarize hint.strategy=partitioned arg_max(TimeGenerated, *) by Computer
| extend Version = strcat(OSMajorVersion, ".", OSMinorVersion)
| join kind = leftouter(VersionMap) on Version
| extend OSName = iif(isempty(OSName), strcat(OSType, " ", ReleaseName), OSName)
| summarize count() by ComputerEnvironment, OSType, OSName
| render piechart

// ServiceMap-Table: ServiceMap Computer Hardware Configurations
// You can also generate useful charts from the data returned by this query
ServiceMapComputer_CL
| summarize hint.strategy=partitioned arg_max(TimeGenerated, *) by Computer
| extend ["Operating System"]= extract("([^,]+$)", 1, OperatingSystemFullName_s)
| extend AKSRegion = extract("([^_]+$)", 1, AzureResourceGroup_s)
| extend ["Memory (GB)"] = round(PhysicalMemory_d/1024)
| extend ["Azure VM Size"] = iff(isempty(HostingProvider_s), "N/A - not an Azure VM", iff(Computer startswith "aks", "N/A - AKS Container", AzureVMSize_s))
| extend ["Azure Region"] = iff(isempty(HostingProvider_s), "N/A - not an Azure VM", iff(Computer startswith "aks", AKSRegion, AzureLocation_s))
| project Computer, ["Operating System"], Processors = Cpus_d, ["Memory (GB)"], ["Memory (KB)"] = PhysicalMemory_d, ["IPv4 Address(es)"] = Ipv4Addresses_s, ["Azure VM Size"], ["Azure Region"]
| sort by Computer

// ServiceMap-PieChart: ServiceMap Computer Azure Region Locations
// Before saving or pinning, enable the "Split By" values of your preference to make the visulaization more impactful
ServiceMapComputer_CL
| summarize hint.strategy=partitioned arg_max(TimeGenerated, *) by Computer
| extend ["Operating System"]= extract("([^,]+$)", 1, OperatingSystemFullName_s)
| extend AKSRegion = extract("([^_]+$)", 1, AzureResourceGroup_s)
| extend ["Memory (GB)"] = round(PhysicalMemory_d/1024)
| extend ["Azure VM Size"] = iff(isempty(HostingProvider_s), "N/A - not an Azure VM", iff(Computer startswith "aks", "N/A - AKS Container", AzureVMSize_s))
| extend ["Azure Region"] = iff(isempty(HostingProvider_s), "N/A - not an Azure VM", iff(Computer startswith "aks", AKSRegion, AzureLocation_s))
| project Computer, ["Operating System"], ["Azure VM Size"], ["Azure Region"]
| summarize count() by ["Azure Region"], ["Azure VM Size"], ["Operating System"], Computer
| render piechart

// Perf-Table: Computer Processor Counts
// Requires enabling at least one Windows\Linux "Processor(*)\..." performance counter
// The required Windows counter IS NOT included in the default recommended set for Windows
// The required Linux counter IS included in the default recommended set for Linux
Perf
| where ObjectName == "Processor" and InstanceName != "_Total"
| summarize Processors = dcount(InstanceName) by Computer
| project Computer, Processors
| sort by Computer asc

// Perf-Table: Computer Disk Counts
// Requires enabling at least one Windows "LogicalDisk(*)\..." and Linux "Physical Disk(*)\..." performance counter
// The required Windows counter IS included in the default recommended set for Windows
// The required Linux counter IS NOT included in the default recommended set for Linux
Perf
| where ObjectName == "LogicalDisk" or ObjectName == "Physical Disk"
| where InstanceName != "_Total" and InstanceName !startswith "Harddisk"
| summarize Disks = dcount(InstanceName) by Computer
| project Computer, Disks
| sort by Computer asc

// Perf-Table: Computer Disk Enumeration
// Requires enabling at least one Windows "LogicalDisk(*)\..." and Linux "Physical Disk(*)\..." performance counter
// The required Windows counter IS included in the default recommended set for Windows
// The required Linux counter IS NOT included in the default recommended set for Linux
Perf
| where ObjectName == "LogicalDisk" or ObjectName == "Physical Disk"
| where InstanceName != "_Total" and InstanceName !startswith "Harddisk"
| summarize makeset(InstanceName) by Computer
| project Computer, ["Assigned Disks"] = set_InstanceName
| sort by Computer asc

// Multi-Table: Computer Hardware Configurations
// Requires enabling at least one Windows "LogicalDisk(*)\..." and Linux "Physical Disk(*)\..." performance counter
// The required Windows counter IS included in the default recommended set for Windows
// The required Linux counter IS NOT included in the default recommended set for Linux
ServiceMapComputer_CL
| summarize hint.strategy=partitioned arg_max(TimeGenerated, *) by Computer
| extend ["Operating System"]= extract("([^,]+$)", 1, OperatingSystemFullName_s)
| extend ["Ephemeral Disk"] = iff(isempty(HostingProvider_s), "N/A - not an Azure VM", iff(OperatingSystemFullName_s startswith "L", "Disk 'sdb' is ephemeral.", "Disk 'D' is ephemeral."))
| project Computer, ["Operating System"], Processors = Cpus_d, ["Memory (KB)"] = PhysicalMemory_d, ["Ephemeral Disk"], ["IPv4 Address(es)"] = Ipv4Addresses_s
| sort by Computer
| join kind= leftouter (
   Perf
   | where ObjectName == "LogicalDisk" or ObjectName == "Physical Disk"
   | where InstanceName != "_Total" and InstanceName !startswith "Harddisk"
   | summarize makeset(InstanceName) by Computer
   | project Computer, ["Assigned Disk(s)"] = set_InstanceName
) on Computer
| project Computer, ["Operating System"], Processors, ["Memory (KB)"], ["Assigned Disk(s)"], ["Ephemeral Disk"], ["IPv4 Address(es)"]
| sort by Computer asc

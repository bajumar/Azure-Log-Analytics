Heartbeat-based Query Examples

// Table of Linux OS versions as of the last Heartbeat, by Computer
Heartbeat
| where OSType == "Linux"
| summarize hint.strategy=partitioned arg_max(TimeGenerated, *) by Computer
| extend Version = strcat(OSMajorVersion, ".", OSMinorVersion)
| project Computer, OSType, OSName, Version, ComputerIP, ComputerEnvironment
| sort by Computer asc

// Table of Windows OS versions as of the last Heartbeat, by Computer
// Server is assumed, as OS version numbers are the same for equivalent Desktop and Server release
// Reference: https://docs.microsoft.com/en-us/windows/desktop/SysInfo/operating-system-version
let VersionMap = datatable (Version: string, ReleaseName:string)
[
    "10.0", "Server 2016/2019",
     "6.3", "Server 2012 R2",
     "6.2", "Server 2012",
     "6.1", "Server 2008 R2",
     "6.0", "Server 2008",
     "5.2", "Server 2003/R2",
     "5.0", "Server 2000"
];
Heartbeat
| where OSType == "Windows"
| summarize hint.strategy=partitioned arg_max(TimeGenerated, *) by Computer
| extend Version = strcat (OSMajorVersion, ".", OSMinorVersion)
| join kind = leftouter(VersionMap) on Version
| extend OSName = strcat(OSType, " ", ReleaseName)
| project Computer, OSType, OSName, Version, ComputerIP, ComputerEnvironment
| sort by Computer asc

// Table of All (Windows and Linux) OS versions as of the last Heartbeat, by Comptuer
// Server is assumed, as OS version numbers are the same for equivalent Desktop and Server releases
// Reference: https://docs.microsoft.com/en-us/windows/desktop/SysInfo/operating-system-version
let VersionMap = datatable (Version: string, ReleaseName:string)
[
    "10.0", "Server 2016/2019",
     "6.3", "Server 2012 R2",
     "6.2", "Server 2012",
     "6.1", "Server 2008 R2",
     "6.0", "Server 2008",
     "5.2", "Server 2003/R2",
     "5.0", "Server 2000"
];
Heartbeat
| summarize hint.strategy=partitioned arg_max(TimeGenerated, *) by Computer
| extend Version = strcat(OSMajorVersion, ".", OSMinorVersion)
| join kind = leftouter(VersionMap) on Version
| extend OSName = iif(isempty(OSName), strcat(OSType, " ", ReleaseName), OSName)
| project Computer, OSType, OSName, Version, ComputerIP, ComputerEnvironment
| sort by Computer asc

// Pie Chart of All (Windows and Linux) OS versions as of the last Heartbeat, by Environment, OSType, OSName
// Before saving or pinning, enable both "Split By" values to make the visulaization more impactful
// Server is assumed, as OS version numbers are the same for equivalent Desktop and Server releases
// Reference: https://docs.microsoft.com/en-us/windows/desktop/SysInfo/operating-system-version
let VersionMap = datatable (Version: string, ReleaseName:string)
[
    "10.0", "Server 2016/2019",
     "6.3", "Server 2012 R2",
     "6.2", "Server 2012",
     "6.1", "Server 2008 R2",
     "6.0", "Server 2008",
     "5.2", "Server 2003/2003 R2",
     "5.0", "Server 2000"
];
Heartbeat
| summarize hint.strategy=partitioned arg_max(TimeGenerated, *) by Computer
| extend Version = strcat(OSMajorVersion, ".", OSMinorVersion)
| join kind = leftouter(VersionMap) on Version
| extend OSName = iif(isempty(OSName), strcat(OSType, " ", ReleaseName), OSName)
| summarize count() by ComputerEnvironment, OSType, OSName
| render piechart


ServiceMap-based Query Examples

// Table of All Computer Configurations as of the last inventory, by Comptuer
// You can also generate useful charts from the data returned by this query
ServiceMapComputer_CL
| summarize hint.strategy=partitioned arg_max(TimeGenerated, *) by Computer
| extend OperatingSystem = extract("([^,]+$)", 1, OperatingSystemFullName_s)
| extend AKSRegion = extract("([^_]+$)", 1, AzureResourceGroup_s)
| extend MemoryGB = round(PhysicalMemory_d/1024)
| extend AzureVM = iff(isempty(HostingProvider_s), "N/A - not an Azure VM", iff(Computer startswith "aks", "N/A - AKS Container", AzureVMSize_s))
| extend AzureRegion = iff(isempty(HostingProvider_s), "N/A - not an Azure VM", iff(Computer startswith "aks", AKSRegion, AzureLocation_s))
| project Computer, OperatingSystem, Processors = Cpus_d, MemoryGB, MemoryKB = PhysicalMemory_d, Addresses = Ipv4Addresses_s, AzureVM, AzureRegion
| sort by Computer

// Pie Chart of All Computer Configurations, without virtual hardware details
// Before saving or pinning, enable the "Split By" values of your preference to make the visulaization more impactful
ServiceMapComputer_CL
| summarize hint.strategy=partitioned arg_max(TimeGenerated, *) by Computer
| extend OperatingSystem = extract("([^,]+$)", 1, OperatingSystemFullName_s)
| extend AKSRegion = extract("([^_]+$)", 1, AzureResourceGroup_s)
| extend MemoryGB = round(PhysicalMemory_d/1024)
| extend AzureVM = iff(isempty(HostingProvider_s), "N/A - not an Azure VM", iff(Computer startswith "aks", "N/A - AKS Container", AzureVMSize_s))
| extend AzureRegion = iff(isempty(HostingProvider_s), "N/A - not an Azure VM", iff(Computer startswith "aks", AKSRegion, AzureLocation_s))
| project Computer, OperatingSystem, AzureVM, AzureRegion
| summarize count() by AzureRegion, AzureVM, OperatingSystem, Computer
| render piechart

